(define (pack xs)
  (define (my-pack xs repeats el)
    (if (null? xs)
        (list repeats)
        (if (equal? el (car xs))
            (my-pack (cdr xs) (append repeats (list (car xs))) el)
            (cons repeats (my-pack (cdr xs) (list (car xs)) (car xs))))))
  (my-pack (cdr xs) (list (car xs)) (car xs)))

(define (encode xs)
  (define (my-encode xs count el)
    (if (null? xs)
        (list (list el count))
        (if (equal? el (car xs))
            (my-encode (cdr xs) (+ count 1) el)
            (cons (list el count) (my-encode (cdr xs) 1 (car xs))))))
  (my-encode (cdr xs) 1 (car xs)))

(define (unpack xs)
    (define (repeat el n)
      (if (= n 0)
          '()
          (append (list el) (repeat el (- n 1)))))
    (if (null? xs)
        '()
        (cons (repeat (car (car xs)) (car (cdr (car xs)))) (unpack (cdr xs)))))

(define (decode xs)
    (define (repeat el n)
      (if (= n 0)
          '()
          (append (list el) (repeat el (- n 1)))))
    (if (null? xs)
        '()
        (append (repeat (car (car xs)) (car (cdr (car xs)))) (decode (cdr xs)))))
  