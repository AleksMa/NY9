(define (my-flatten xs)
  (if (null? xs)
      '()
      (if (pair? (car xs))
          (append (my-flatten (car xs)) (my-flatten (cdr xs)))
          (append (list (car xs)) (my-flatten (cdr xs))))))

(define (string-trim-left str)
  (define xs (string->list str))
  (or (and (pair? xs)
           (or (equal? (car xs) #\space)
               (equal? (car xs) #\tab)
               (equal? (car xs) #\newline))
           (string-trim-left ( list->string(cdr xs))))
      (list->string xs)))

(define (my-reverse xs)
  (define (iter xs ys n)
    (if (< n (length xs))
        (iter xs (cons (list-ref xs n) ys) (+ n 1))
        ys))
  (iter xs '() 0))

(define (string-trim-right str)
  (list->string (my-reverse (string->list (string-trim-left (list->string (my-reverse (string->list str))))))))

(define (string-trim str)
  (string-trim-right (string-trim-left str)))

(define (string-prefix? a b)
  (define xs (string->list a))
  (define ys (string->list b))
  (or (null? xs)
      (and (<= (length xs) (length ys))
       (equal? (car xs) (car ys))
       (or (null? (cdr xs))
           (string-prefix?  (list->string (cdr xs)) (list->string (cdr ys)))))))

(define (string-suffix? a b)
  (string-prefix? (list->string (reverse (string->list a))) (list->string (reverse (string->list b)))))

(define (string-infix? a b)
  (define xs (string->list a))
  (define ys (string->list b))
  (define (search xs ys)
    (and (pair? (cdr ys))
         (or (null? xs)
             (equal? (car xs) (car ys))
             (search xs (cdr ys))
             (string-prefix? (list->string xs) (list->string ys)))))
  (and (<= (length xs) (length ys)) (search xs ys)))
  
(define (string-split str sep)
  (define xs (string->list str))
  (define (iter xs sep res str)
    (if (null? xs)
        (cdr (my-flatten (list res (list->string str))))
        (if (string-prefix? sep (list->string xs)) 
            (iter (list-tail xs (length (string->list sep))) sep (list res (list->string str)) '() )
            (iter (cdr xs) sep res (if (null? (car (my-flatten (list str (car xs)))))
                                              (cdr (my-flatten (list str (car xs))))
                                              (my-flatten (list str (car xs)))
                                              )))))
  (iter xs sep '() '() ))