(define (int? num)
    (or (eq? #\1 num)
        (eq? #\2 num)
        (eq? #\3 num)
        (eq? #\4 num)
        (eq? #\5 num)
        (eq? #\6 num)
        (eq? #\7 num)
        (eq? #\8 num)
        (eq? #\9 num)
        (eq? #\0 num)))

(define (space? sym)
  (or (eq? #\tab sym)
      (eq? #\space sym)
      (eq? #\newline sym)))
      

(define (check-integer str)
  (define xs (string->list str))
  (define (helper xs i)
    (or (and (null? xs) (> i 0))
        (and (pair? xs)
             (or (int? (car xs))
                 ;(eq? #\/ (car xs))
             (and (eq? #\+ (car xs)) (pair? (cdr xs)))
             (and (eq? #\+ (car xs)) (pair? (cdr xs))))
             (helper (cdr xs) (+ 1 i)))))
  (helper xs 0))

(define (scan-integer str)
  (define xs (string->list str))
  (define (helper xs i res)
    (or (and (null? xs) (> i 0) (string->number (list->string res)))
        (and (pair? xs)
             (or (int? (car xs))
                 (eq? #\- (car xs)))
             (helper (cdr xs) (+ i 1) (append res (list (car xs)))))
        (and (pair? xs) (eq? #\+ (car xs)) (helper (cdr xs) (+ i 1) res))))
 (helper xs 0 '()))


(define (scan-integer-to-space xs)
  ;(define xs (string->list str))
  (define (helper xs i res)
    (or (and (or (null? xs) (space? (car xs))) (> i 0) res)
             (and (pair? xs)
                  (or (int? (car xs))
                 (eq? #\- (car xs)))
             (helper (cdr xs) (+ i 1) (append res (list (car xs)))))
        (and (pair? xs) (eq? #\+ (car xs)) (helper (cdr xs) (+ i 1) res))
        ))
 (helper xs 0 '()))

(define (scan-many-integers str)
  (define xs (string->list str)) 
  (define (helper xs i res)
    (or (and (null? xs) (pair? res) res)
        (and (space? (car xs)) (helper (cdr xs) (+ i 1) res))
        (and (scan-integer-to-space xs)
             (helper (list-tail xs (length (scan-integer-to-space xs))) (+ i (length (scan-integer-to-space xs))) (append res (list (string->number (list->string (scan-integer-to-space xs)))))))))
  (helper xs 0 '()))
  
  