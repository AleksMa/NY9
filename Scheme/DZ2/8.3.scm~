(define (fib n)
  (cond ((= n 0) 0)
        ((= n 1) 1)
        (else (+ (fib (- n 1))
                 (fib (- n 2))))))

;The memoized version of the same procedure is
(define (memoize f)
  (let ((memo '()))
    (lambda (x)
      (let ((memoized (assoc x memo)))
        (if memoized
            (cadr memoized)
            (let ((new-value (f x)))
              (set! memo (cons (list x new-value) memo))
              result))))))


(define memo-fib
  (memoize (lambda (n)
             (cond ((= n 0) 0)
                   ((= n 1) 1)
                   (else (+ (memo-fib (- n 1))
                            (memo-fib (- n 2))))))))

