(define (variable? expr)
  (symbol? expr))
(define (minus? expr)
  (and (list? expr)
       (= (length expr) 2)
       (eq? (list-ref expr 0) '-)))
(define (const-prod? expr)
  (and (list? expr)
       (= (length expr) 3)
       (number? (cadr expr))
       (eq? (list-ref expr 0) '*)))
(define (f*g? expr)
  (and (= (length expr) 3)
       (eq? (car expr) '*)))
(define (u*w*v? expr)
  (and (= (length expr) 4)
       (eq? (car expr) '*)))
(define (x^n? expr)
  (and (list? expr)
       (= (length expr) 3)
       (eq? (list-ref expr 0) 'expt)
       (number? (list-ref expr 2))
       (or (number? (list-ref expr 1))
           (list? (list-ref expr 1))
           (symbol? (list-ref expr 1)))))
(define (n^x? expr)
  (and (list? expr)
       (= (length expr) 3)
       (eq? (list-ref expr 0) 'expt)
       (number? (list-ref expr 1))
       (or (number? (list-ref expr 2))
           (list? (list-ref expr 2))
           (symbol? (list-ref expr 2)))))
(define (sum? expr)
  (and (list? expr)
       (= (length expr) 3)
       (or
        (eq? (list-ref expr 0) '-)
        (eq? (list-ref expr 0) '+)))) 
(define (trigo? expr)
  (and (list? expr)
       (= (length expr) 2)
       (or (eq? (list-ref expr 0) 'sin)
           (eq? (list-ref expr 0) 'cos)
           (eq? (list-ref expr 0) 'tan))))
(define (e^x? expr)
  (eq? (list-ref expr 0) 'exp))
(define (ln? expr)
  (eq? (car expr) 'log))
(define (n/x? expr)
  (and (number? (cadr expr))
       (eq? (car expr) '/)))
(define (u/v? expr)
  (and (not (number? (cadr expr)))
       (eq? (car expr) '/)))


(define (der-const expr)
  `0)
(define (der-variable expr)
  `1)
(define (der-minus expr)
  (define a (derivative (list-ref expr 1)))
  (- a))
(define (der-prod-num expr)
  (define a (list-ref expr 1))
  (define b (derivative (list-ref expr 2)))
      (if (and (number? a) (number? b))
          (* a b)
          `(* ,a ,b)))
(define (der-sum expr)
  (define a (derivative (list-ref expr 1)))
  (define b (derivative (list-ref expr 2)))
  (if (eq? (list-ref expr 0) '-)
      (if (and (number? a) (number? b))
          (- a b)
          `(- ,a ,b))
      (if (and (number? a) (number? b))
          (+ a b)
          `(+ ,a ,b))))
(define (der-x^n expr)
  (define x (list-ref expr 1))
  (define n (list-ref expr 2))
  (define n-1 (- (list-ref expr 2) 1))
  `(* ,n (expt ,x ,n-1)))
(define (der-n^x expr)
  (define x (list-ref expr 2))
  (define n (list-ref expr 1))
  `(* (expt ,n ,x) (log ,n)))
(define (der-trigo expr)
  (define f (list-ref expr 0))
  (define x (list-ref expr 1))
  (or (and (eq? f 'sin)
           `(* ,(derivative x) (cos ,x)))
      (and (eq? f 'cos)
           `(- (* ,(derivative x) (sin ,x))))))
(define (der-e^x expr)
  (define f expr)
  (define dx (derivative (list-ref expr 1)))
  `(* ,dx ,f))
(define (der-ln expr)
  (define x (cadr expr))
  `(* ,(derivative x) (/ 1 ,x)))
(define (der-n/x expr)
  (define n (cadr expr))
  (define x (caddr expr))
  (or
   ;(and (or (symbol? x) (number? x))
   ;     `(- (/ ,n (expt ,x -2))))
   (and (x^n? x)
        `( * (- ,(caddr x)) (/ ,n (expt ,(cadr x) (+ ,(caddr x) 1)))))
   ;(/ n (* c (expt x k)))
   ;заменим x на (caddr x):
   (and (const-prod? x)
         `( * (- ,(caddr (caddr x))) (/ ,n ( * ,(cadr x) (expt ,(cadr (caddr x)) (+ ,(caddr (caddr x)) 1))))))
  
  `(- (/ ,n (expt ,x 2)))
  ))
(define (der-f*g expr)
  (define f (cadr expr))
  (define g (caddr expr))
  `(+ (* ,(derivative f) ,g) (* ,f ,(derivative g))))
(define (der-u*w*v expr)
  (define u (cadr expr))
  (define w (caddr expr))
  (define v (cadddr expr))
  `(+ (* ,(derivative u) ,w ,v) (* ,u ,(derivative w) ,v) (* ,u ,w ,(derivative v))))
(define (der-u/v expr)
  (define u (cadr expr))
  (define v (caddr expr))
  `(/ (- (* ,(derivative u) ,v) (* ,u ,(derivative v)))
      (expt v 2)))


(define (derivative expr)
  (or
   (and (number? expr)
        (der-const expr))
   (and (variable? expr)
        (der-variable expr))
   (and (minus? expr)
        (der-minus expr))
   (and (const-prod? expr)
        (number? (list-ref expr 1))
        (der-prod-num expr))
   (and (sum? expr)
        (der-sum expr))
   (and (x^n? expr)
        (der-x^n expr))
   (and (n^x? expr)
        (der-n^x expr))
   (and (trigo? expr)
        (der-trigo expr))
   (and (e^x? expr)
        (der-e^x expr))
   (and (ln? expr)
        (der-ln expr))
   (and (n/x? expr)
        (der-n/x expr))
   (and (f*g? expr)
        (der-f*g expr))
   (and (u*w*v? expr)
        (der-u*w*v expr))
   ))