(define (ref1 struct i)
  (define xs
    (if (vector? struct)
        (vector->list struct)
        (if (string? struct)
            (string->list struct)
            struct)))
  (define (my-ref xs i n)
    (if (= i n)
        (car xs)
        (my-ref (cdr xs) i (+ n 1))))
  (and (< i (length xs))
       (my-ref xs i 0)))

(define (ref2 struct i el)
  (define xs
    (if (vector? struct)
        (vector->list struct)
        (if (string? struct)
            (string->list struct)
            struct)))
  (define (my-ref xs i el n)
    (if (= i n)
        (if (null? xs)
            (append (list el) xs)
            (append (list el (car xs)) (cdr xs)))
        (cons (car xs) (my-ref (cdr xs) i el (+ n 1)))))
  (and (<= i (length xs))
      (cond ((vector? struct)
             (list->vector (my-ref xs i el 0)))
            ((string? struct)
             (and (char? el)
                  (list->string (my-ref xs i el 0))))
            (else (my-ref xs i el 0)))))

(define-syntax ref
  (syntax-rules ()
    ((_ struct i) (ref1 struct i))
    ((_ struct i el) (ref2 struct i el))))
  