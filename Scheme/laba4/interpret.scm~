;INTERPRET
(define (interpret ws xs)
  (define (search x vs n)
    (if (equal? x (vector-ref vs n))
        n
        (search x vs (+ n 1))))
  (define (analyse ws wc xs rs as)
    ;(write wc)
    ;(newline)
    ;(write xs)
    ;(newline)
    (if (>= wc (vector-length ws))
        xs
        (let ((word (vector-ref ws wc)))
          (if (number? word)
              (analyse ws (+ wc 1) (cons word xs) rs as)
              ;WORDS
              (cond ((equal? word '+) (analyse ws (+ wc 1) (cons (+ (car xs) (cadr xs)) (cddr xs)) rs as))
                    ((equal? word '*) (analyse ws (+ wc 1) (cons (* (car xs) (cadr xs)) (cddr xs)) rs as))
                    ((equal? word '-) (analyse ws (+ wc 1) (cons (- (cadr xs) (car xs)) (cddr xs)) rs as))
                    ((equal? word '/) (analyse ws (+ wc 1) (cons (quotient (cadr xs) (car xs)) (cddr xs)) rs as))
                    ((equal? word 'mod) (analyse ws (+ wc 1) (cons (remainder (cadr xs) (car xs)) (cddr xs)) rs as))
                    ((equal? word 'neg) (analyse ws (+ wc 1) (cons (- (car xs)) (cdr xs)) rs as))
                    ((equal? word '=) (analyse ws (+ wc 1) (cons (or (and (= (cadr xs) (car xs)) -1) 0) (cddr xs)) rs as))
                    ((equal? word '>) (analyse ws (+ wc 1) (cons (or (and (> (cadr xs) (car xs)) -1) 0) (cddr xs)) rs as))
                    ((equal? word '<) (analyse ws (+ wc 1) (cons (or (and (< (cadr xs) (car xs)) -1) 0) (cddr xs)) rs as))
                    ((equal? word 'not) (analyse ws (+ wc 1) (cons (or (and (= (car xs) 0) -1) 0) (cdr xs)) rs as))
                    ((equal? word 'and) (analyse ws (+ wc 1) (cons (or (and (not (= (car xs) 0)) (not (= (cadr xs) 0)) -1) 0) (cddr xs)) rs as))
                    ((equal? word 'or) (analyse ws (+ wc 1)  (cons (or (and (= (car xs) 0) (= (cadr xs) 0) 0) -1) (cddr xs)) rs as))
                    ((equal? word 'drop) (analyse ws (+ wc 1) (cdr xs) rs as))
                    ((equal? word 'swap) (analyse ws (+ wc 1) (append (list (cadr xs) (car xs)) (cddr xs)) rs as))
                    ((equal? word 'dup) (analyse ws (+ wc 1) (append (list (car xs) (car xs)) (cdr xs)) rs as))
                    ((equal? word 'over) (analyse ws (+ wc 1) (append (list (cadr xs) (car xs) (cadr xs)) (cddr xs)) rs as))
                    ((equal? word 'rot) (analyse ws (+ wc 1) (append (list (caddr xs) (cadr xs) (car xs)) (cdddr xs)) rs as))
                    ((equal? word 'depth) (analyse ws (+ wc 1) (cons (length xs) xs) rs as))
                    ((equal? word 'define) (analyse ws (+ 1 (search 'end ws (+ wc 1))) xs rs (cons (list (vector-ref ws (+ wc 1)) (+ wc 2)) as)))
                    ((equal? word 'end) (analyse ws (car rs) xs (cdr rs) as))
                    ((equal? word 'exit) (analyse ws (car rs) xs (cdr rs) as))
                    ((equal? word 'if) (analyse ws (or (and (not (= 0 (car xs))) (+ wc 1)) (+ 1 (search 'endif ws (+ wc 1)))) (cdr xs) rs as))
                    ((equal? word 'endif) (analyse ws (+ wc 1) xs rs as))
                    ((assoc word as)   (analyse ws (cadr (assoc word as)) xs (cons (+ wc 1) rs) as))
                    (else
                     (write "WRONG WORD")
                     (analyse ws (+ wc 1) (cons word xs) rs as)))))))
  (analyse ws 0 xs '() '()))
